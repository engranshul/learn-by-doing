Typed arrays are special-purpose arrays designed to work with numeric
types (not all types, as the name might imply). The origin of typed arrays
can be traced to WebGL, a port of OpenGL ES 2.0 designed for use in web
pages with the <canvas> element. Typed arrays were created as part of the
port to provide fast bitwise arithmetic in JavaScript.

Arithmetic on native JavaScript numbers was too slow for WebGL
because the numbers were stored in a 64-bit floating-point format and
converted to 32-bit integers as needed. Typed arrays were introduced to
circumvent this limitation and provide better performance for arithmetic
operations. The concept is that any single number can be treated like an
array of bits and thus can use the familiar methods available on JavaScript
arrays.

ECMAScript 6 adopted typed arrays as a formal part of the language to
ensure better compatibility across JavaScript engines and interoperability
with JavaScript arrays. Although the ECMAScript 6 version of typed arrays
is not the same as the WebGL version, enough similarities exist to make the
ECMAScript 6 version an evolution of the WebGL version rather than a different
approach.

Common Methods :
Typed arrays also include many methods that are functionally equivalent to
regular array methods. You can use the following array methods on typed
arrays:
copyWithin() findIndex() lastIndexOf() slice()
entries() forEach() map() some()
fill() indexOf() reduce() sort()
filter() join() reduceRight() values()
find() keys() reverse()

Keep in mind that although these methods act like their counterparts
on Array.prototype, they’re not exactly the same. 

Same Iterators :
of() and  from() methods


Differences Between Typed and Regular Arrays

The most importance difference between typed arrays and regular arrays is
that typed arrays are not regular arrays. Typed arrays don’t inherit from Array
and Array.isArray() returns false when passed a typed array.


Behavioral Differences
Regular arrays can grow and shrink as you interact with them, but typed
arrays always remain the same size. You cannot assign a value to a nonexistent
numeric index in a typed array like you can with regular arrays,because typed
arrays ignore the operation.


Missing Methods
Although typed arrays do have many of the same methods as regular arrays,
they also lack several array methods. The following methods are not available
on typed arrays:
concat() shift()
pop() splice()
push() unshift()