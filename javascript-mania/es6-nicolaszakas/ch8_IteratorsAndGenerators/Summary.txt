Iterators are an important part of ECMAScript 6 and are at the root of several
key language elements. On the surface, iterators provide a simple way
to return a sequence of values using a simple API. However, there are far
more complex ways to use iterators in ECMAScript 6.

The Symbol.iterator symbol is used to define default iterators for objects.
Both built-in objects and developer-defined objects can use this symbol to
provide a method that returns an iterator. When Symbol.iterator is provided
on an object, the object is considered an iterable.

The for-of loop uses iterables to return a series of values in a loop.
Using for-of is easier than iterating with a traditional for loop because
you no longer need to track values and control when the loop ends. The
for-of loop automatically reads all values from the iterator until there are
no more, and then it exits.

To make for-of simpler to use, many values in ECMAScript 6 have default
iterators. All the collection types—that is, arrays, maps, and sets—have iterators
designed to make their contents easy to access. Strings also have a default
iterator, which makes iterating over the characters of the string (rather than
the code units) easy.

The spread operator works with any iterable and makes converting iterables
into arrays easy, too. The conversion works by reading values from an
iterator and inserting them individually into an array.
A generator is a special function that automatically creates an iterator
when called. Generator definitions are indicated by an asterisk (*) and use
of the yield keyword to indicate which value to return for each successive
call to the next() method.

Generator delegation encourages good encapsulation of iterator behavior
by letting you reuse existing generators in new generators. You can use
an existing generator inside another generator by calling yield * instead of
yield. This process allows you to create an iterator that returns values from
multiple iterators.

Perhaps the most interesting and exciting aspect of generators and
iterators is the possibility of creating cleaner-looking asynchronous code.
Instead of needing to use callbacks everywhere, you can set up code that
looks synchronous but in fact uses yield to wait for asynchronous operations
to complete.