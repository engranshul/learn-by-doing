Re-exporting a Binding

Eventually, you may want to re-export something that your module has
imported. For instance, perhaps you’re creating a library from several small
modules. You can re-export an imported value using the patterns already
discussed in this chapter, as follows:

import { sum } from "./example.js";
export { sum }

Although that works, a single statement can also do the same task:
export { sum } from "./example.js";

This form of export looks into the specified module for the declaration
of sum and then exports it. Of course, you can also export a different name
for the same value:

export { sum as add } from "./example.js";

******************************************************************
ECMAScript 6 adds modules to the language as a way to package and
encapsulate functionality. Modules behave differently than scripts in that
they don’t modify the global scope with their top-level variables, functions,
and classes, and this is undefined. To achieve that behavior, modules are
loaded using a different mode.

You must export any functionality you want to make available to consumers
of a module. Variables, functions, and classes can all be exported,
and there is also one default export allowed per module. After exporting,
another module can import all or some of the exported names. These
names act as though they were defined by let and operate as block bindings
that can’t be redeclared in the same module.

Modules don’t need to export anything if they’re manipulating something
in the global scope. You can actually import from such a module without
introducing any bindings into the module scope.

Because modules must run in a different mode, browsers introduced
<script type="module"> to signal that the source file or inline code should be
executed as a module. Module files loaded with <script type="module"> are
loaded as though the defer attribute is applied to them. Modules are also
executed in the order in which they appear in the containing document
after the document is fully parsed.